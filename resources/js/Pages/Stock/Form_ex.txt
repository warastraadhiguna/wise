import React from "react";
import Select from "react-select";

const Form = ({
    setShowForm,
    dataProps,
    setDataProps,
    action,
    errors,
    isProcessing,
    productCategories,
    brands,
    units
}) => {
    const handleChange = (event) => {
        setDataProps((prevData) => ({
            ...prevData,
            [event.target.name]: event.target.value,
        }));
    };

    const productCategoryOptions = Object.keys(productCategories).map((key) => ({
        value: productCategories[key].id,
        label: productCategories[key].name,
    }));    

    const selectedProductCategoryOption = productCategoryOptions.find(option => option.value === dataProps.product_category_id);

    const brandOptions = Object.keys(brands).map((key) => ({
        value: brands[key].id,
        label: brands[key].name,
    }));    

    const selectedBrandOption = brandOptions.find(option => option.value === dataProps.brand_id);

    const unitOptions = Object.keys(units).map((key) => ({
        value: units[key].id,
        label: units[key].name,
    }));    

    const selectedUnitOption = unitOptions.find(option => option.value === dataProps.unit_id);

    const handleSelectChange = (selectedOption, name) => {
        setDataProps((prevData) => ({
            ...prevData,
            [name]: selectedOption == null ? null : selectedOption.value,
        }));
    };

    return (
        <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white rounded-lg shadow-lg max-w-4xl w-full p-6">
                <h2 className="text-3xl font-semibold mb-5 text-center">
                    {dataProps && dataProps.id
                        ? dataProps.deleted_at
                            ? "Restore Data"
                            : "Edit Data"
                        : "Add data"}
                    <hr />
                </h2>
                <div className="w-full mx-auto">
                    <form
                        className="w-full"
                        onSubmit={(event) => action(event)}
                        autoComplete="off"
                    >
                        <div className="flex flex-wrap -mx-3 mb-6">

                            <div className="w-full md:w-1/2 px-3">
                                <label
                                    className="block uppercase tracking-wide text-black text-xs font-bold mb-2"
                                    htmlFor="grid-code"
                                >
                                    Barcode
                                </label>
                                <input
                                    className="appearance-none block w-full bg-white text-black border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                    id="grid-code"
                                    type="text"
                                    name="code"
                                    autoComplete="off"    
                                    inputMode="search"
                                    placeholder={dataProps.id? "" : "Kosongi, pilih product category untuk autogenerated"}
                                    value={dataProps.code}
                                    disabled={
                                        dataProps.deleted_at || isProcessing
                                    }
                                    onChange={(event) => handleChange(event)}
                                />
                                {errors && errors.code && (
                                    <div className="text-red-700 text-sm mt-2">
                                        {errors.code}
                                    </div>
                                )}
                            </div>                            
                            <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                                <label
                                    className="block uppercase tracking-wide text-black text-xs font-bold mb-2"
                                    htmlFor="grid-name"
                                >
                                    Name
                                </label>
                                <input
                                    className="appearance-none block w-full bg-white text-black border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                    id="grid-name"
                                    name="name"
                                    value={dataProps.name}
                                    type="text"
                                    disabled={
                                        dataProps.deleted_at || isProcessing
                                    }
                                    onChange={(event) => handleChange(event)}
                                />
                                {errors && errors.name && (
                                    <div className="text-red-700 text-sm mt-2">
                                        {errors.name}
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                                <label
                                    className="block uppercase tracking-wide text-black text-xs font-bold mb-2"
                                    htmlFor="grid-name"
                                >
                                    Product Categories
                                </label>
                                <div className="inline-block relative w-full">
                                    <Select
                                        options={productCategoryOptions}
                                        onChange={(event) => handleSelectChange(event, "product_category_id")}
                                        name="product_category_id"
                                        defaultValue={selectedProductCategoryOption}
                                        isClearable={true}
                                    />
                                </div>
                                {errors && errors.product_category_id && (
                                    <div className="text-red-700 text-sm mt-2">
                                        {errors.product_category_id}
                                    </div>
                                )}
                            </div>
                            <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                                <label className="block uppercase tracking-wide text-black text-xs font-bold mb-2"
                                    htmlFor="grid-name">
                                    Brand
                                </label>
                                <div className="inline-block relative w-full">
                                    <Select options={brandOptions} onChange={(event)=>
                                        handleSelectChange(event, "brand_id")}
                                        name="brand_id"
                                        defaultValue={selectedBrandOption}
                                        isClearable={true}
                                        />
                                </div>
                                {errors && errors.brand_id && (
                                <div className="text-red-700 text-sm mt-2">
                                    {errors.brand_id}
                                </div>
                                )}
                            </div>
                        </div>                    
                        <div className="flex flex-wrap -mx-3 mb-6">
                            <div className="w-full md:w-1/2 px-3">
                                <label
                                    className="block uppercase tracking-wide text-black text-xs font-bold mb-2"
                                    htmlFor="grid-note"
                                >
                                    Note
                                </label>
                                <textarea
                                    className="appearance-none block w-full bg-white text-black border border-gray-200 rounded py-3 px-4 leading-tight focus:outline-none focus:bg-white focus:border-gray-500"
                                    id="grid-note"
                                    name="note"
                                    value={dataProps.note}
                                    disabled={
                                        dataProps.deleted_at || isProcessing
                                    }
                                    onChange={(event) => handleChange(event)}/>
                                {errors && errors.note && (
                                    <div className="text-red-700 text-sm mt-2">
                                        {errors.note}
                                    </div>
                                )}
                            </div>
                            <div className="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                                <label className="block uppercase tracking-wide text-black text-xs font-bold mb-2"
                                    htmlFor="grid-name">
                                    Unit
                                </label>
                                <div className="inline-block relative w-full">
                                    <Select options={unitOptions} onChange={(event)=>
                                        handleSelectChange(event, "unit_id")}
                                        name="unit_id"
                                        defaultValue={selectedUnitOption}
                                        isClearable={true}
                                        />
                                </div>
                                {errors && errors.unit_id && (
                                <div className="text-red-700 text-sm mt-2">
                                    {errors.unit_id}
                                </div>
                                )}
                            </div>                            
                        </div>                                             
                        <div className="mt-4 flex justify-end">
                            <button
                                className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded mr-4"
                                type="submit"
                                disabled={isProcessing}
                            >
                                {dataProps &&
                                dataProps.id &&
                                dataProps.deleted_at
                                    ? "Restore"
                                    : "Save"}
                            </button>
                            <button
                                onClick={() => setShowForm(false)}
                                className="bg-red-500 text-white font-bold py-1 px-2 rounded"
                                disabled={isProcessing}
                            >
                                Close
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default Form;
